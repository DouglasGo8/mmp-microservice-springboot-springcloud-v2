server.port=7005
server.error.include-message=always
# profile
# spring.profiles.active=docker
# the Camel endpoints
#seda.product.create.composite.mediator.endpoint=seda:productCreateCompositeDef&defaultBlockWhenFull=true&concurrentConsumers=3
#seda.product.delete.composite.mediator.endpoint=seda:productDeleteCompositeDef&defaultBlockWhenFull=true&concurrentConsumers=3
#direct.product.composite.mediator.endpoint=direct:productCompositeDef
#
kafka.topic.reviews.endpoint=kafka:reviews
kafka.topic.products.endpoint=kafka:products
kafka.topic.recommendations.endpoint=kafka:recommendations
# Create/Delete Seda Event
seda.event.kafka.review=seda:reviewCreate&defaultBlockWhenFull=true&concurrentConsumers=3
seda.event.kafka.product=seda:productCreate&defaultBlockWhenFull=true&concurrentConsumers=3
seda.event.kafka.recommendation=seda:recommendationCreate&defaultBlockWhenFull=true&concurrentConsumers=3
#
# Increase Throughput Producer (Idempotent Safe Producer Mandatory Config)
camel.component.kafka.linger-ms=20
camel.component.kafka.retries=2147483647
camel.component.kafka.enable-idempotence=true
camel.component.kafka.request-required-acks=-1
camel.component.kafka.compression-codec=snappy
# 32 KB
camel.component.kafka.producer-batch-size=32768
#
#camel.component.kafka.key = partitionKey
camel.component.kafka.group-id=auditGroup
#
camel.component.kafka.brokers=localhost:9092
camel.component.kafka.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# needs org.springframework.kafka dependency in pom.xml
camel.component.kafka.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#
# the SpringBoot Services
app.product-service.host=localhost
app.product-service.port=7001
app.review-service.host=localhost
app.review-service.port=7003
app.recommendation-service.host=localhost
app.recommendation-service.port=7002
# open-api info
api.common.version=1.0.0
api.common.title=Sample API
api.common.description=Description of the API...
api.common.termsOfService=MY TERMS OF SERVICE
api.common.license=MY LICENSE
api.common.licenseUrl=MY LICENSE URL
api.common.externalDocDesc=MY WIKI PAGE
api.common.externalDocUrl=MY WIKI URL
api.common.contact.name=NAME OF CONTACT
api.common.contact.url=CONTACT URL
api.common.contact.email=contact@mail.com
# open-api info
api.responseCodes.ok.description=OK
api.responseCodes.badRequest.description=Bad Request, invalid format of the request. See response message for more information
api.responseCodes.notFound.description=Not found, the specified id does not exist
api.responseCodes.unprocessableEntity.description=Unprocessable entity, input parameters caused the processing to fail. See response message for more information
# open-api info
api.product-composite.get-composite-product.description=Returns a composite view of the specified product id
api.product-composite.get-composite-product.notes=Normal response \
If the requested product id is found the method will return information regarding: \
1. Base product information \
1. Review s\
1. Recommendations \
1. Service Addresses \n (technical information regarding the addresses of the microservices that created the response) \
# Expected partial and error responses \
In the following cases, only a partial response be created (used to simplify testing of error conditions) \
## Product id 113 \
200 - Ok, but no recommendations will be returned \
## Product id 213 \
200 - Ok, but no reviews will be returne d\
## Non numerical product id \
400 - A **Bad Request** error will be returned \
## Product id 13 \
404 - A **Not Found** error will be returned \
## Negative product ids \
422 - An **Unprocessable Entity** error will be returned
# open api specs
springdoc.swagger-ui.path=/openapi/swagger-ui.html
springdoc.api-docs.path=/openapi/v3/api-docs
springdoc.packagesToScan=com.packtpub.microservices.springboot.product.composite
springdoc.pathsToMatch=/**
